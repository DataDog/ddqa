name: build

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  APP_NAME: ddqa
  PYTHON_VERSION: "3.11"
  PYOXIDIZER_VERSION: "0.24.0"

jobs:
  binaries:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
        # Linux
        - target: aarch64-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        - target: x86_64-unknown-linux-musl
          os: ubuntu-22.04
          cross: true
        - target: i686-unknown-linux-gnu
          os: ubuntu-22.04
          cross: true
        # Windows
        - target: x86_64-pc-windows-msvc
          os: windows-2022
        - target: i686-pc-windows-msvc
          os: windows-2022
        # macOS
        - target: aarch64-apple-darwin
          os: macos-12
        - target: x86_64-apple-darwin
          os: macos-12

    outputs:
      version: ${{ steps.version.outputs.version }}

    env:
      CARGO: cargo
      CARGO_BUILD_TARGET: ${{ matrix.job.target }}
      PYAPP_REPO: pyapp
      PYAPP_VERSION: v0.5.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Clone PyApp
      run: git clone --depth 1 --branch $PYAPP_VERSION https://github.com/ofek/pyapp $PYAPP_REPO

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Hatch
      run: pip install -U hatch

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.job.target }}

    - name: Set up cross compiling
      if: matrix.job.cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Configure cross compiling
      if: matrix.job.cross
      run: echo "CARGO=cross" >> $GITHUB_ENV

    - name: Set version
      id: version
      run: |-
        hatch version
        echo "version=$(hatch version)" >> $GITHUB_OUTPUT

    - name: Build
      run: hatch build --target app

    - name: Set executable bit
      if: runner.os != 'Windows'
      run: chmod +x dist/app/*

    - uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ runner.os }}
        path: dist/app/*
        if-no-files-found: error

  windows-installers:
    name: Build Windows installers
    needs: binaries
    runs-on: windows-2022

    env:
      VERSION: ${{ needs.binaries.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install PyOxidizer ${{ env.PYOXIDIZER_VERSION }}
      run: pip install pyoxidizer==${{ env.PYOXIDIZER_VERSION }}

    - uses: actions/download-artifact@v3
      with:
        name: binaries-${{ runner.os }}
        path: bin

    # bin/<APP_NAME>-<VERSION>-<TARGET>.exe -> targets/<TARGET>/<APP_NAME>.exe
    - name: Set up directory structure
      run: |-
        mkdir targets
        for f in bin/*; do
          if [[ "$f" =~ ${{ env.VERSION }}-(.+).exe$ ]]; then
            target="${BASH_REMATCH[1]}"
            mkdir targets/$target
            mv $f targets/$target/${{ env.APP_NAME }}.exe
          fi
        done

    - name: Build installers
      run: >-
        pyoxidizer build windows_installers
        --release
        --var version ${{ env.VERSION }}

    - name: Set up artifacts
      run: |-
        mkdir installers
        mv build/*/release/*/*.{exe,msi} installers

        for f in installers/*; do
          if [[ "$f" =~ Datadog[[:blank:]]QA(.+)$ ]]; then
            mv "$f" "installers/${{ env.APP_NAME }}${BASH_REMATCH[1]}"
          fi
        done

    - name: Upload installers
      uses: actions/upload-artifact@v3
      with:
        name: installers-${{ runner.os }}
        path: installers/*
