[build-system]
requires = ["hatchling>=1.17.0", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "ddqa"
dynamic = ["version"]
description = "Datadog's QA manager for releases of GitHub repositories"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
keywords = [
  "datadog",
  "qa",
  "testing",
  "tooling",
]
authors = [
  { name = "Datadog, Inc.", email = "dev@datadoghq.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "click>=8.1.3",
  "httpx",
  "pillow",
  "platformdirs",
  "pydantic<2",
  "rich",
  "textual~=0.20.1",
  "textual-autocomplete>=2.1.0b0",
  "tomli-w",
]

[project.urls]
Source = "https://github.com/DataDog/ddqa"

[project.scripts]
ddqa = "ddqa.cli:main"

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "python-simplified-semver", local_scheme = "no-local-version" }

[tool.hatch.build.hooks.vcs]
version-file = "src/ddqa/_version.py"

[tool.black]
target-version = ["py311"]
line-length = 120
skip-string-normalization = true

[tool.mypy]
disallow_untyped_defs = false
disallow_incomplete_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
warn_no_return = false
warn_unused_ignores = true
plugins = [
  "pydantic.mypy",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
target-version = "py311"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["ddqa"]

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["ddqa", "tests"]
branch = true
parallel = true
omit = [
  "src/ddqa/_version.py.py",
]

[tool.coverage.paths]
ddqa = ["src/ddqa", "*/ddqa/src/ddqa"]
tests = ["tests", "*/ddqa/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
asyncio_mode = "auto"
