{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Datadog QA","text":"CI/CD Docs Package Meta <p>DDQA is a tool for users of Jira to perform QA of anticipated releases of code on GitHub.</p> <p>It works by finding test candidates between two Git references and translates each pull request or direct commit into a Jira issue per designated GitHub team, assigned to a semi-randomly chosen member of that team.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Issue creation is completely configurable by each team, with overrides available at runtime</li> <li>Robust status tracking with optional filters</li> <li>Providing a TUI allows for running via SSH on other machines, which is useful when there is restricted access to Git repositories</li> </ul>"},{"location":"#license","title":"License","text":"<p>DDQA is distributed under the terms of the MIT license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"install/","title":"Installation","text":"<p>Important</p> <p>In addition to installing the tool itself, you will also need to use a modern terminal emulator such as:</p> <ul> <li>Windows Terminal</li> <li>iTerm2</li> <li>WezTerm</li> <li>Alacritty</li> </ul>"},{"location":"install/#github-releases","title":"GitHub releases","text":"<p>Each release provides the following:</p> <ul> <li>Standalone binaries for Linux, Windows, and macOS</li> <li>Windows AMD64 (64-bit) MSI installer</li> <li>Windows x86 (32-bit) MSI installer</li> <li>Windows universal (AMD64+x86) EXE installer</li> <li>macOS DMG installer</li> </ul>"},{"location":"install/#pipx","title":"pipx","text":"<p>pipx allows for the global installation of Python applications in isolated environments.</p> <pre><code>pipx install ddqa\n</code></pre>"},{"location":"install/#pip","title":"pip","text":"<p>DDQA is available on PyPI and can be installed with pip.</p> <pre><code>pip install ddqa\n</code></pre> <p>Warning</p> <p>This method modifies the Python environment in which you choose to install. Consider instead using pipx to avoid dependency conflicts.</p>"},{"location":"actions/create/","title":"Create items","text":"<pre><code>Usage: ddqa create [OPTIONS] PREVIOUS_REF CURRENT_REF\n\n  Create QA items.\n\nOptions:\n  -l, --label TEXT  Labels that will be attached to created issues  [required]\n</code></pre> <p>As an example, to create items for a hypothetical <code>7.44.0</code> release where the previous release was a patch, you might do:</p> <pre><code>ddqa create 7.43.1 7.44.0 -l 7.44.0-qa -l 7.44.0-rc.1\n</code></pre> <p></p>"},{"location":"actions/create/#queue","title":"Queue","text":"<p>This section tells you how many PRs or direct commits are queued up for assignment. This will also display the status of API retries due to rate limits.</p> <p></p>"},{"location":"actions/create/#candidates","title":"Candidates","text":"<p>This section displays the list of candidates for assignment. Clicking will render data about the candidate in the right panel.</p> <p></p>"},{"location":"actions/create/#title","title":"Title","text":"<p>This section displays a short description about the candidate, using the title for PRs and Git metadata for direct commits.</p> <p>You may Ctrl+Left Button the identifier on top to navigate to the candidate in your preferred web browser.</p> <p></p>"},{"location":"actions/create/#pr-labels","title":"PR labels","text":"<p>If the candidate is a PR then its labels will render here.</p> <p></p>"},{"location":"actions/create/#description","title":"Description","text":"<p>This section displays detailed information about the candidate, using the PR body or Git metadata for direct commits.</p> <p></p>"},{"location":"actions/create/#pending-assignments","title":"Pending assignments","text":"<p>This section displays a toggle for each team determining whether they should be assigned to the candidate. The default state of each team's toggle will be enabled if any of the candidate's PR labels match the team's defined labels.</p> <p></p>"},{"location":"actions/create/#creation","title":"Creation","text":"<p>When you are satisfied with the pending candidate assignments, you may click the button to begin the process of Jira issue creation.</p> <p></p> <p>Tip</p> <p>It is likely that your Jira profile is set up to automatically watch issues that you create, including those via the API. If you would like to disable this temporarily so you don't get notifications for everything, you may do the following:</p> <ol> <li>Go to your profile settings page on the Jira instance <code>https://&lt;ORG&gt;.atlassian.net/secure/ViewPersonalSettings.jspa</code></li> <li>Change the <code>Watch your issues</code> option to <code>Disabled</code></li> </ol>"},{"location":"actions/create/#progress","title":"Progress","text":"<p>The queue section will transition to showing you the progress of QA item creation.</p> <p></p>"},{"location":"actions/create/#items","title":"Items","text":"<p>The candidate listing will be reduced to just those that have been assigned. The number on the left refers to the number of teams that have had an issue created for that candidate.</p> <p></p>"},{"location":"actions/create/#results","title":"Results","text":"<p>The assignments section will now display the created issue for each team. You may Ctrl+Left Button the assigned team member or Jira issue to open in your preferred web browser.</p> <p></p> <p>Note</p> <p>When each candidate is assigned, the priority is based on whoever has been assigned the least amount of items, followed by whoever did not review the candidate (if it is a PR). Assuming that when an assignment is about to happen and everyone on the team has the same number of assigned items and everyone reviewed (or did not) the candidate, then the result is completely random.</p> <p>You may exit by pressing Ctrl+C or the button.</p> <p></p>"},{"location":"actions/status/","title":"View dashboard","text":"<pre><code>Usage: ddqa status [OPTIONS] LABELS...\n\n  Display the QA dashboard.\n\nOptions:\n  -h, --help  Show this message and exit.\n</code></pre> <p>As an example, if you want to check the status of any issue that is labeled with either <code>7.44.0-rc.1</code> or <code>7.44.0-rc.2</code>, you would do:</p> <pre><code>ddqa status 7.44.0-rc.1 7.44.0-rc.2\n</code></pre> <p></p>"},{"location":"actions/status/#issues","title":"Issues","text":"<p>This section displays the status of all issues, or a subset of issues if a filter is active.</p> <p></p>"},{"location":"actions/status/#metadata","title":"Metadata","text":"<p>This section displays a short description about what the currently highlighted issue is testing, using the title for PRs and Git metadata for direct commits.</p> <p>You may Ctrl+Left Button the identifier on top to navigate to the issue in your preferred web browser.</p> <p></p>"},{"location":"actions/status/#progress","title":"Progress","text":"<p>This section displays the completion progress of all issues, or a subset of issues if a filter is active.</p> <p></p> <p>Note</p> <p>An issue is considered complete when its status corresponds to the last entry in the configured list of QA statuses.</p>"},{"location":"actions/status/#filters","title":"Filters","text":"<p>This section contains mutually exclusive filters that may be used to limit the tracked issues to a subset. To clear a filter, remove the text and press Enter.</p> <p></p> <p>Note</p> <p>If the auto-completion options are missing something you might expect, it means there are no issues that correspond to that item.</p>"},{"location":"actions/status/#qa-status","title":"QA status","text":"<p>This section displays the QA status of the currently highlighted issue. When the issue belongs to you, the <code>Move</code> button will be enabled.</p> <p></p>"},{"location":"config/repo/","title":"Repository configuration","text":"<p>A repository must be configured (example) before use:</p> <pre><code>global_config_source = \"...\"\nqa_statuses = [\"...\"]\n\n[teams.\"...\"]\ngithub_team = \"...\"\njira_project = \"...\"\njira_issue_type = \"...\"\njira_statuses = [\"...\"]\n</code></pre> <p>The config file is located by default in your repository at <code>/.ddqa/config.toml</code> and can be overridden with the top level <code>--config</code> option.</p>"},{"location":"config/repo/#core-options","title":"Core options","text":""},{"location":"config/repo/#global-config-source","title":"Global config source (required)","text":"<p>Key: <code>global_config_source</code></p> <p>This is a URL (optionally encoded in Base64) like <code>https://raw.githubusercontent.com/org/repo/master/jira.toml</code> that points to the raw contents of a TOML file on GitHub that contains potentially private metadata that the tool needs in order to operate. Currently, the only required information is the cloud URL and a mapping of GitHub usernames to Jira IDs:</p> <pre><code>jira_server = \"https://&lt;ORG&gt;.atlassian.net\"\n\n[members]\ngithub-user1 = \"jira-id1\"\n</code></pre>"},{"location":"config/repo/#qa-statuses","title":"QA statuses (required)","text":"<p>Key: <code>qa_statuses</code></p> <p>The entries and order of this list correspond to the desired QA workflow, for example:</p> <pre><code>qa_statuses = [\n\"TODO\",\n\"Testing\",\n\"Done\",\n]\n</code></pre>"},{"location":"config/repo/#ignored-labels","title":"Ignored labels","text":"<p>Key: <code>ignored_labels</code></p> <p>Any pull requests labeled with any of the entries will not be assigned by default:</p> <pre><code>ignored_labels = [\n\"changelog/no-changelog\",\n]\n</code></pre>"},{"location":"config/repo/#teams","title":"Teams","text":"<p>Each team must be configured.</p> <pre><code>[teams.\"...\"]\n# Per-team options\n</code></pre> <p>The name of each team is arbitrary but should be the human readable version or a nickname. The order of teams is also arbitrary but would benefit from being ordered by teams that commit/would be assigned most frequently as manual selection would potentially require less scrolling.</p>"},{"location":"config/repo/#github-team","title":"GitHub team (required)","text":"<p>Key: <code>github_team</code></p> <p>This is the team's GitHub name, excluding the organization <code>&lt;ORG&gt;/</code> prefix.</p>"},{"location":"config/repo/#jira-project","title":"Jira project (required)","text":"<p>Key: <code>jira_project</code></p> <p>This is the team's Jira project in which issues will be created. If there exists an issue <code>FOO-123</code>, the project name is <code>FOO</code>.</p>"},{"location":"config/repo/#jira-issue-type","title":"Jira issue type (required)","text":"<p>Key: <code>jira_issue_type</code></p> <p>This is the type of Jira issue that will be created and will most often be <code>Task</code>. The issue type can be found as the <code>fields.issuetype.name</code> returned value in the payload from the <code>/rest/api/2/issue/{issueIdOrKey}</code> endpoint.</p>"},{"location":"config/repo/#jira-statuses","title":"Jira statuses (required)","text":"<p>Key: <code>jira_statuses</code></p> <p>This is an array of Jira statuses that correspond to the order of QA status entries. Alternatively, this may be a mapping of QA statuses to Jira statuses. The available Jira statuses may be found using the <code>/rest/api/2/project/{projectIdOrKey}/statuses</code> endpoint.</p>"},{"location":"config/repo/#github-labels","title":"GitHub labels","text":"<p>Key: <code>github_labels</code></p> <p>This team will be assigned by default to any pull requests that are labeled with any of the entries (as long as the pull request has no labels that match any of those defined as ignored).</p>"},{"location":"config/repo/#jira-component","title":"Jira component","text":"<p>Key: <code>jira_component</code></p> <p>This is the name of a Jira project component with which to create issues.</p>"},{"location":"config/repo/#excluded-members","title":"Excluded members","text":"<p>Key: <code>exclude_members</code></p> <p>This is an array of GitHub usernames who should be excluded from QA participation.</p>"},{"location":"config/sync/","title":"Config synchronization","text":"<p>Before performing any actions, you should synchronize the repository's external configuration by running:</p> <pre><code>ddqa sync\n</code></pre> <p>Tip</p> <p>This automatically happens on the first run of a given repository.</p>"},{"location":"config/user/","title":"User configuration","text":"<p>DDQA will always ensure valid config by loading the configuration screen if there are errors or missing required fields.</p> <p></p> <p>Tip</p> <p>To locate your personal config file you may run: <code>ddqa config find</code></p>"},{"location":"config/user/#github-auth","title":"GitHub auth","text":"<p>You'll need to create a personal access token (classic) with <code>repo</code> and <code>read:org</code> permissions and, if required by the organization, enable SAML single sign-on.</p> <p> </p> <p>The following APIs are used:</p> <ul> <li><code>/search/issues</code> (GET)</li> <li><code>/repos/{owner}/{repo}/pulls/{pull_number}/reviews</code> (GET)</li> <li> <p><code>/orgs/{org}/teams/{team_slug}/members</code> (GET)</p> Note <p>This endpoint is not yet supported when using fine-grained personal access tokens.</p> </li> </ul>"},{"location":"config/user/#jira-auth","title":"Jira auth","text":"<p>You'll need to create an API token with the appropriate scopes.</p> <p>The following APIs are used:</p> <ul> <li><code>/rest/api/2/issue</code> (POST)</li> <li><code>/rest/api/2/myself</code> (GET)</li> <li><code>/rest/api/2/search</code> (POST)</li> <li><code>/rest/api/2/issue/{issueIdOrKey}/transitions</code> (GET, POST)</li> </ul>"}]}