{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Datadog QA \u00b6 CI/CD Docs Package Meta DDQA is a tool for users of Jira to perform QA of anticipated releases of code on GitHub. It works by finding test candidates between two Git references and translates each pull request or direct commit into a Jira issue per designated GitHub team, assigned to a semi-randomly chosen member of that team. Features \u00b6 Issue creation is completely configurable by each team, with overrides available at runtime Robust status tracking with optional filters Providing a TUI allows for running via SSH on other machines, which is useful when there is restricted access to Git repositories License \u00b6 DDQA is distributed under the terms of the MIT license. Navigation \u00b6 Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#datadog-qa","text":"CI/CD Docs Package Meta DDQA is a tool for users of Jira to perform QA of anticipated releases of code on GitHub. It works by finding test candidates between two Git references and translates each pull request or direct commit into a Jira issue per designated GitHub team, assigned to a semi-randomly chosen member of that team.","title":"Datadog QA"},{"location":"#features","text":"Issue creation is completely configurable by each team, with overrides available at runtime Robust status tracking with optional filters Providing a TUI allows for running via SSH on other machines, which is useful when there is restricted access to Git repositories","title":"Features"},{"location":"#license","text":"DDQA is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"install/","text":"Installation \u00b6 Important In addition to installing the tool itself, you will also need to use a modern terminal emulator such as: Windows Terminal iTerm2 WezTerm Alacritty GitHub releases \u00b6 Each release provides the following: Standalone binaries for Linux, Windows, and macOS Windows AMD64 (64-bit) MSI installer Windows x86 (32-bit) MSI installer Windows universal (AMD64+x86) EXE installer macOS DMG installer pipx \u00b6 pipx allows for the global installation of Python applications in isolated environments. pipx install ddqa pip \u00b6 DDQA is available on PyPI and can be installed with pip . pip install ddqa Warning This method modifies the Python environment in which you choose to install. Consider instead using pipx to avoid dependency conflicts.","title":"Installation"},{"location":"install/#installation","text":"Important In addition to installing the tool itself, you will also need to use a modern terminal emulator such as: Windows Terminal iTerm2 WezTerm Alacritty","title":"Installation"},{"location":"install/#github-releases","text":"Each release provides the following: Standalone binaries for Linux, Windows, and macOS Windows AMD64 (64-bit) MSI installer Windows x86 (32-bit) MSI installer Windows universal (AMD64+x86) EXE installer macOS DMG installer","title":"GitHub releases"},{"location":"install/#pipx","text":"pipx allows for the global installation of Python applications in isolated environments. pipx install ddqa","title":"pipx"},{"location":"install/#pip","text":"DDQA is available on PyPI and can be installed with pip . pip install ddqa Warning This method modifies the Python environment in which you choose to install. Consider instead using pipx to avoid dependency conflicts.","title":"pip"},{"location":"actions/create/","text":"Create items \u00b6 Usage: ddqa create [OPTIONS] PREVIOUS_REF CURRENT_REF Create QA items. Options: -l, --label TEXT Labels that will be attached to created issues [required] As an example, to create items for a hypothetical 7.44.0 release where the previous release was a patch, you might do: ddqa create 7.43.1 7.44.0 -l 7.44.0-qa -l 7.44.0-rc.1 Queue \u00b6 This section tells you how many PRs or direct commits are queued up for assignment. This will also display the status of API retries due to rate limits. Candidates \u00b6 This section displays the list of candidates for assignment. Clicking will render data about the candidate in the right panel. Title \u00b6 This section displays a short description about the candidate, using the title for PRs and Git metadata for direct commits. You may Ctrl + Left Button the identifier on top to navigate to the candidate in your preferred web browser. PR labels \u00b6 If the candidate is a PR then its labels will render here. Description \u00b6 This section displays detailed information about the candidate, using the PR body or Git metadata for direct commits. Pending assignments \u00b6 This section displays a toggle for each team determining whether they should be assigned to the candidate. The default state of each team's toggle will be enabled if any of the candidate's PR labels match the team's defined labels . Creation \u00b6 When you are satisfied with the pending candidate assignments, you may click the button to begin the process of Jira issue creation. Tip It is likely that your Jira profile is set up to automatically watch issues that you create, including those via the API. If you would like to disable this temporarily so you don't get notifications for everything, you may do the following: Go to your profile settings page on the Jira instance https://<ORG>.atlassian.net/secure/ViewPersonalSettings.jspa Change the Watch your issues option to Disabled Progress \u00b6 The queue section will transition to showing you the progress of QA item creation. Items \u00b6 The candidate listing will be reduced to just those that have been assigned. The number on the left refers to the number of teams that have had an issue created for that candidate. Results \u00b6 The assignments section will now display the created issue for each team. You may Ctrl + Left Button the assigned team member or Jira issue to open in your preferred web browser. Note When each candidate is assigned, the priority is based on whoever has been assigned the least amount of items, followed by whoever did not review the candidate (if it is a PR). Assuming that when an assignment is about to happen and everyone on the team has the same number of assigned items and everyone reviewed (or did not) the candidate, then the result is completely random. You may exit by pressing Ctrl + C or the button.","title":"Create items"},{"location":"actions/create/#create-items","text":"Usage: ddqa create [OPTIONS] PREVIOUS_REF CURRENT_REF Create QA items. Options: -l, --label TEXT Labels that will be attached to created issues [required] As an example, to create items for a hypothetical 7.44.0 release where the previous release was a patch, you might do: ddqa create 7.43.1 7.44.0 -l 7.44.0-qa -l 7.44.0-rc.1","title":"Create items"},{"location":"actions/create/#queue","text":"This section tells you how many PRs or direct commits are queued up for assignment. This will also display the status of API retries due to rate limits.","title":"Queue"},{"location":"actions/create/#candidates","text":"This section displays the list of candidates for assignment. Clicking will render data about the candidate in the right panel.","title":"Candidates"},{"location":"actions/create/#title","text":"This section displays a short description about the candidate, using the title for PRs and Git metadata for direct commits. You may Ctrl + Left Button the identifier on top to navigate to the candidate in your preferred web browser.","title":"Title"},{"location":"actions/create/#pr-labels","text":"If the candidate is a PR then its labels will render here.","title":"PR labels"},{"location":"actions/create/#description","text":"This section displays detailed information about the candidate, using the PR body or Git metadata for direct commits.","title":"Description"},{"location":"actions/create/#pending-assignments","text":"This section displays a toggle for each team determining whether they should be assigned to the candidate. The default state of each team's toggle will be enabled if any of the candidate's PR labels match the team's defined labels .","title":"Pending assignments"},{"location":"actions/create/#creation","text":"When you are satisfied with the pending candidate assignments, you may click the button to begin the process of Jira issue creation. Tip It is likely that your Jira profile is set up to automatically watch issues that you create, including those via the API. If you would like to disable this temporarily so you don't get notifications for everything, you may do the following: Go to your profile settings page on the Jira instance https://<ORG>.atlassian.net/secure/ViewPersonalSettings.jspa Change the Watch your issues option to Disabled","title":"Creation"},{"location":"actions/create/#progress","text":"The queue section will transition to showing you the progress of QA item creation.","title":"Progress"},{"location":"actions/create/#items","text":"The candidate listing will be reduced to just those that have been assigned. The number on the left refers to the number of teams that have had an issue created for that candidate.","title":"Items"},{"location":"actions/create/#results","text":"The assignments section will now display the created issue for each team. You may Ctrl + Left Button the assigned team member or Jira issue to open in your preferred web browser. Note When each candidate is assigned, the priority is based on whoever has been assigned the least amount of items, followed by whoever did not review the candidate (if it is a PR). Assuming that when an assignment is about to happen and everyone on the team has the same number of assigned items and everyone reviewed (or did not) the candidate, then the result is completely random. You may exit by pressing Ctrl + C or the button.","title":"Results"},{"location":"actions/status/","text":"View dashboard \u00b6 Usage: ddqa status [OPTIONS] LABELS... Display the QA dashboard. Options: -h, --help Show this message and exit. As an example, if you want to check the status of any issue that is labeled with either 7.44.0-rc.1 or 7.44.0-rc.2 , you would do: ddqa status 7.44.0-rc.1 7.44.0-rc.2 Issues \u00b6 This section displays the status of all issues, or a subset of issues if a filter is active. Metadata \u00b6 This section displays a short description about what the currently highlighted issue is testing, using the title for PRs and Git metadata for direct commits. You may Ctrl + Left Button the identifier on top to navigate to the issue in your preferred web browser. Progress \u00b6 This section displays the completion progress of all issues, or a subset of issues if a filter is active. Note An issue is considered complete when its status corresponds to the last entry in the configured list of QA statuses . Filters \u00b6 This section contains mutually exclusive filters that may be used to limit the tracked issues to a subset. To clear a filter, remove the text and press Enter . Note If the auto-completion options are missing something you might expect, it means there are no issues that correspond to that item. QA status \u00b6 This section displays the QA status of the currently highlighted issue . When the issue belongs to you, the Move button will be enabled.","title":"View dashboard"},{"location":"actions/status/#view-dashboard","text":"Usage: ddqa status [OPTIONS] LABELS... Display the QA dashboard. Options: -h, --help Show this message and exit. As an example, if you want to check the status of any issue that is labeled with either 7.44.0-rc.1 or 7.44.0-rc.2 , you would do: ddqa status 7.44.0-rc.1 7.44.0-rc.2","title":"View dashboard"},{"location":"actions/status/#issues","text":"This section displays the status of all issues, or a subset of issues if a filter is active.","title":"Issues"},{"location":"actions/status/#metadata","text":"This section displays a short description about what the currently highlighted issue is testing, using the title for PRs and Git metadata for direct commits. You may Ctrl + Left Button the identifier on top to navigate to the issue in your preferred web browser.","title":"Metadata"},{"location":"actions/status/#progress","text":"This section displays the completion progress of all issues, or a subset of issues if a filter is active. Note An issue is considered complete when its status corresponds to the last entry in the configured list of QA statuses .","title":"Progress"},{"location":"actions/status/#filters","text":"This section contains mutually exclusive filters that may be used to limit the tracked issues to a subset. To clear a filter, remove the text and press Enter . Note If the auto-completion options are missing something you might expect, it means there are no issues that correspond to that item.","title":"Filters"},{"location":"actions/status/#qa-status","text":"This section displays the QA status of the currently highlighted issue . When the issue belongs to you, the Move button will be enabled.","title":"QA status"},{"location":"config/repo/","text":"Repository configuration \u00b6 A repository must be configured ( example ) before use: global_config_source = \"...\" qa_statuses = [ \"...\" ] [teams.\"...\"] github_team = \"...\" jira_project = \"...\" jira_issue_type = \"...\" jira_statuses = [ \"...\" ] The config file is located by default in your repository at /.ddqa/config.toml and can be overridden with the top level --config option. Core options \u00b6 Global config source ( required ) \u00b6 Key: global_config_source This is a URL (optionally encoded in Base64 ) like https://raw.githubusercontent.com/org/repo/master/jira.toml that points to the raw contents of a TOML file on GitHub that contains potentially private metadata that the tool needs in order to operate. Currently, the only required information is the cloud URL and a mapping of GitHub usernames to Jira IDs: jira_server = \"https://<ORG>.atlassian.net\" [members] github-user1 = \"jira-id1\" QA statuses ( required ) \u00b6 Key: qa_statuses The entries and order of this list correspond to the desired QA workflow, for example: qa_statuses = [ \"TODO\" , \"Testing\" , \"Done\" , ] Ignored labels \u00b6 Key: ignored_labels Any pull requests labeled with any of the entries will not be assigned by default: ignored_labels = [ \"changelog/no-changelog\" , ] Teams \u00b6 Each team must be configured. [teams.\"...\"] # Per-team options The name of each team is arbitrary but should be the human readable version or a nickname. The order of teams is also arbitrary but would benefit from being ordered by teams that commit/would be assigned most frequently as manual selection would potentially require less scrolling. GitHub team ( required ) \u00b6 Key: github_team This is the team's GitHub name, excluding the organization <ORG>/ prefix. Jira project ( required ) \u00b6 Key: jira_project This is the team's Jira project in which issues will be created. If there exists an issue FOO-123 , the project name is FOO . Jira issue type ( required ) \u00b6 Key: jira_issue_type This is the type of Jira issue that will be created and will most often be Task . The issue type can be found as the fields.issuetype.name returned value in the payload from the /rest/api/2/issue/{issueIdOrKey} endpoint. Jira statuses ( required ) \u00b6 Key: jira_statuses This is an array of Jira statuses that correspond to the order of QA status entries. Alternatively, this may be a mapping of QA statuses to Jira statuses. The available Jira statuses may be found using the /rest/api/2/project/{projectIdOrKey}/statuses endpoint. GitHub labels \u00b6 Key: github_labels This team will be assigned by default to any pull requests that are labeled with any of the entries (as long as the pull request has no labels that match any of those defined as ignored ). Jira component \u00b6 Key: jira_component This is the name of a Jira project component with which to create issues. Excluded members \u00b6 Key: exclude_members This is an array of GitHub usernames who should be excluded from QA participation.","title":"Repository"},{"location":"config/repo/#repository-configuration","text":"A repository must be configured ( example ) before use: global_config_source = \"...\" qa_statuses = [ \"...\" ] [teams.\"...\"] github_team = \"...\" jira_project = \"...\" jira_issue_type = \"...\" jira_statuses = [ \"...\" ] The config file is located by default in your repository at /.ddqa/config.toml and can be overridden with the top level --config option.","title":"Repository configuration"},{"location":"config/repo/#core-options","text":"","title":"Core options"},{"location":"config/repo/#global-config-source","text":"Key: global_config_source This is a URL (optionally encoded in Base64 ) like https://raw.githubusercontent.com/org/repo/master/jira.toml that points to the raw contents of a TOML file on GitHub that contains potentially private metadata that the tool needs in order to operate. Currently, the only required information is the cloud URL and a mapping of GitHub usernames to Jira IDs: jira_server = \"https://<ORG>.atlassian.net\" [members] github-user1 = \"jira-id1\"","title":"Global config source (required)"},{"location":"config/repo/#qa-statuses","text":"Key: qa_statuses The entries and order of this list correspond to the desired QA workflow, for example: qa_statuses = [ \"TODO\" , \"Testing\" , \"Done\" , ]","title":"QA statuses (required)"},{"location":"config/repo/#ignored-labels","text":"Key: ignored_labels Any pull requests labeled with any of the entries will not be assigned by default: ignored_labels = [ \"changelog/no-changelog\" , ]","title":"Ignored labels"},{"location":"config/repo/#teams","text":"Each team must be configured. [teams.\"...\"] # Per-team options The name of each team is arbitrary but should be the human readable version or a nickname. The order of teams is also arbitrary but would benefit from being ordered by teams that commit/would be assigned most frequently as manual selection would potentially require less scrolling.","title":"Teams"},{"location":"config/repo/#github-team","text":"Key: github_team This is the team's GitHub name, excluding the organization <ORG>/ prefix.","title":"GitHub team (required)"},{"location":"config/repo/#jira-project","text":"Key: jira_project This is the team's Jira project in which issues will be created. If there exists an issue FOO-123 , the project name is FOO .","title":"Jira project (required)"},{"location":"config/repo/#jira-issue-type","text":"Key: jira_issue_type This is the type of Jira issue that will be created and will most often be Task . The issue type can be found as the fields.issuetype.name returned value in the payload from the /rest/api/2/issue/{issueIdOrKey} endpoint.","title":"Jira issue type (required)"},{"location":"config/repo/#jira-statuses","text":"Key: jira_statuses This is an array of Jira statuses that correspond to the order of QA status entries. Alternatively, this may be a mapping of QA statuses to Jira statuses. The available Jira statuses may be found using the /rest/api/2/project/{projectIdOrKey}/statuses endpoint.","title":"Jira statuses (required)"},{"location":"config/repo/#github-labels","text":"Key: github_labels This team will be assigned by default to any pull requests that are labeled with any of the entries (as long as the pull request has no labels that match any of those defined as ignored ).","title":"GitHub labels"},{"location":"config/repo/#jira-component","text":"Key: jira_component This is the name of a Jira project component with which to create issues.","title":"Jira component"},{"location":"config/repo/#excluded-members","text":"Key: exclude_members This is an array of GitHub usernames who should be excluded from QA participation.","title":"Excluded members"},{"location":"config/user/","text":"User configuration \u00b6 DDQA will always ensure valid config by loading the configuration screen if there are errors or missing required fields. Tip To locate your personal config file you may run: ddqa config find GitHub auth \u00b6 You'll need to create a personal access token (classic) with repo and read:org permissions and, if required by the organization, enable SAML single sign-on . The following APIs are used: /search/issues ( GET ) /repos/{owner}/{repo}/pulls/{pull_number}/reviews ( GET ) /orgs/{org}/teams/{team_slug}/members ( GET ) Note This endpoint is not yet supported when using fine-grained personal access tokens. Jira auth \u00b6 You'll need to create an API token with the appropriate scopes. The following APIs are used: /rest/api/2/issue ( POST ) /rest/api/2/myself ( GET ) /rest/api/2/search ( POST ) /rest/api/2/issue/{issueIdOrKey}/transitions ( GET , POST )","title":"User"},{"location":"config/user/#user-configuration","text":"DDQA will always ensure valid config by loading the configuration screen if there are errors or missing required fields. Tip To locate your personal config file you may run: ddqa config find","title":"User configuration"},{"location":"config/user/#github-auth","text":"You'll need to create a personal access token (classic) with repo and read:org permissions and, if required by the organization, enable SAML single sign-on . The following APIs are used: /search/issues ( GET ) /repos/{owner}/{repo}/pulls/{pull_number}/reviews ( GET ) /orgs/{org}/teams/{team_slug}/members ( GET ) Note This endpoint is not yet supported when using fine-grained personal access tokens.","title":"GitHub auth"},{"location":"config/user/#jira-auth","text":"You'll need to create an API token with the appropriate scopes. The following APIs are used: /rest/api/2/issue ( POST ) /rest/api/2/myself ( GET ) /rest/api/2/search ( POST ) /rest/api/2/issue/{issueIdOrKey}/transitions ( GET , POST )","title":"Jira auth"}]}