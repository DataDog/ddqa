{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Datadog QA \u00b6 CI/CD Docs Package Meta DDQA is a tool for users of Jira to perform QA of anticipated releases of code on GitHub. It works by finding test candidates between two Git references and translates each pull request or direct commit into a Jira issue per designated GitHub team, assigned to a semi-randomly chosen member of that team. Features \u00b6 Issue creation is completely configurable by each team, with overrides available at runtime Robust status tracking with optional filters Providing a TUI allows for running via SSH on other machines, which is useful when there is restricted access to Git repositories License \u00b6 DDQA is distributed under the terms of the MIT license. Navigation \u00b6 Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"About"},{"location":"#datadog-qa","text":"CI/CD Docs Package Meta DDQA is a tool for users of Jira to perform QA of anticipated releases of code on GitHub. It works by finding test candidates between two Git references and translates each pull request or direct commit into a Jira issue per designated GitHub team, assigned to a semi-randomly chosen member of that team.","title":"Datadog QA"},{"location":"#features","text":"Issue creation is completely configurable by each team, with overrides available at runtime Robust status tracking with optional filters Providing a TUI allows for running via SSH on other machines, which is useful when there is restricted access to Git repositories","title":"Features"},{"location":"#license","text":"DDQA is distributed under the terms of the MIT license.","title":"License"},{"location":"#navigation","text":"Desktop readers can use special keyboard shortcuts: Keys Action , (comma) p Navigate to the \"previous\" page . (period) n Navigate to the \"next\" page / s Display the search modal","title":"Navigation"},{"location":"install/","text":"Installation \u00b6 GitHub releases \u00b6 Each release provides the following: Standalone binaries for Linux, Windows, and macOS Windows AMD64 (64-bit) MSI installer Windows x86 (32-bit) MSI installer Windows universal (AMD64+x86) EXE installer macOS DMG installer pipx \u00b6 pipx allows for the global installation of Python applications in isolated environments. pipx install ddqa pip \u00b6 DDQA is available on PyPI and can be installed with pip . pip install ddqa Warning This method modifies the Python environment in which you choose to install. Consider instead using pipx to avoid dependency conflicts.","title":"Installation"},{"location":"install/#installation","text":"","title":"Installation"},{"location":"install/#github-releases","text":"Each release provides the following: Standalone binaries for Linux, Windows, and macOS Windows AMD64 (64-bit) MSI installer Windows x86 (32-bit) MSI installer Windows universal (AMD64+x86) EXE installer macOS DMG installer","title":"GitHub releases"},{"location":"install/#pipx","text":"pipx allows for the global installation of Python applications in isolated environments. pipx install ddqa","title":"pipx"},{"location":"install/#pip","text":"DDQA is available on PyPI and can be installed with pip . pip install ddqa Warning This method modifies the Python environment in which you choose to install. Consider instead using pipx to avoid dependency conflicts.","title":"pip"},{"location":"config/repo/","text":"Repository configuration \u00b6 A repository must be configured before use: global_config_source = \"...\" qa_statuses = [ \"...\" ] [teams.\"...\"] github_team = \"...\" jira_project = \"...\" jira_issue_type = \"...\" jira_statuses = [ \"...\" ] Core options \u00b6 global_config_source ( required ) - This is a URL (optionally encoded in Base64 ) like https://raw.githubusercontent.com/org/repo/master/jira.toml that points to the raw contents of a TOML file on GitHub that contains potentially private metadata that the tool needs in order to operate. Currently, the only required information is the cloud URL and a mapping of GitHub usernames to Jira IDs: jira_server = \"https://<ORG>.atlassian.net\" [members] github-user1 = \"jira-id1\" qa_statuses ( required ) - The entries and order of this list correspond to the desired QA workflow, for example: qa_statuses = [ \"TODO\" , \"Testing\" , \"Done\" , ] ignored_labels - Any pull requests labeled with any of the entries will not be assigned by default: ignored_labels = [ \"changelog/no-changelog\" , ] Teams \u00b6 Each team must be configured. The name of each team is arbitrary but should be the human readable version or a nickname. The order of teams is also arbitrary but would benefit from being ordered by teams that commit/would be assigned most frequently as manual selection would potentially require less scrolling. github_team ( required ) - This is the team's GitHub name, excluding the organization <ORG>/ prefix jira_project ( required ) - This is the team's Jira project in which issues will be created. If there exists an issue FOO-123 , the project name is FOO . jira_issue_type ( required ) - This is the type of Jira issue that will be created and will most often be Task . The issue type can be found as the fields.issuetype.name returned value in the payload from the /rest/api/2/issue/{issueIdOrKey} endpoint. jira_statuses ( required ) - This is an array of Jira statuses that map to the top-level qa_statuses option. Alternatively, this may be a mapping of QA statuses to Jira statuses. The available Jira statuses may be found using the /rest/api/2/project/{projectIdOrKey}/statuses endpoint. github_labels - This team will be assigned by default to any pull requests that are labeled with any of the entries (as long as the pull request has no labels that match any of those defined in the top-level ignored_labels option) jira_component - This is the name of a Jira project component with which to create issues exclude_members - This is an array of members who should be excluded from QA participation","title":"Repository"},{"location":"config/repo/#repository-configuration","text":"A repository must be configured before use: global_config_source = \"...\" qa_statuses = [ \"...\" ] [teams.\"...\"] github_team = \"...\" jira_project = \"...\" jira_issue_type = \"...\" jira_statuses = [ \"...\" ]","title":"Repository configuration"},{"location":"config/repo/#core-options","text":"global_config_source ( required ) - This is a URL (optionally encoded in Base64 ) like https://raw.githubusercontent.com/org/repo/master/jira.toml that points to the raw contents of a TOML file on GitHub that contains potentially private metadata that the tool needs in order to operate. Currently, the only required information is the cloud URL and a mapping of GitHub usernames to Jira IDs: jira_server = \"https://<ORG>.atlassian.net\" [members] github-user1 = \"jira-id1\" qa_statuses ( required ) - The entries and order of this list correspond to the desired QA workflow, for example: qa_statuses = [ \"TODO\" , \"Testing\" , \"Done\" , ] ignored_labels - Any pull requests labeled with any of the entries will not be assigned by default: ignored_labels = [ \"changelog/no-changelog\" , ]","title":"Core options"},{"location":"config/repo/#teams","text":"Each team must be configured. The name of each team is arbitrary but should be the human readable version or a nickname. The order of teams is also arbitrary but would benefit from being ordered by teams that commit/would be assigned most frequently as manual selection would potentially require less scrolling. github_team ( required ) - This is the team's GitHub name, excluding the organization <ORG>/ prefix jira_project ( required ) - This is the team's Jira project in which issues will be created. If there exists an issue FOO-123 , the project name is FOO . jira_issue_type ( required ) - This is the type of Jira issue that will be created and will most often be Task . The issue type can be found as the fields.issuetype.name returned value in the payload from the /rest/api/2/issue/{issueIdOrKey} endpoint. jira_statuses ( required ) - This is an array of Jira statuses that map to the top-level qa_statuses option. Alternatively, this may be a mapping of QA statuses to Jira statuses. The available Jira statuses may be found using the /rest/api/2/project/{projectIdOrKey}/statuses endpoint. github_labels - This team will be assigned by default to any pull requests that are labeled with any of the entries (as long as the pull request has no labels that match any of those defined in the top-level ignored_labels option) jira_component - This is the name of a Jira project component with which to create issues exclude_members - This is an array of members who should be excluded from QA participation","title":"Teams"},{"location":"config/user/","text":"User configuration \u00b6 DDQA will always ensure valid config by loading the configuration screen if there are errors or missing required fields. GitHub auth \u00b6 You'll need to create a personal access token (classic) with public_repo and read:org permissions and, if required by the organization, enable SAML single sign-on . The following APIs are used: /search/issues ( GET ) /repos/{owner}/{repo}/pulls/{pull_number}/reviews ( GET ) /orgs/{org}/teams/{team_slug}/members ( GET ) Note This endpoint is not yet supported when using fine-grained personal access tokens. Jira auth \u00b6 You'll need to create an API token with the appropriate scopes. The following APIs are used: /rest/api/2/issue ( POST ) /rest/api/2/myself ( GET ) /rest/api/2/search ( POST ) /rest/api/2/issue/{issueIdOrKey}/transitions ( GET , POST )","title":"User"},{"location":"config/user/#user-configuration","text":"DDQA will always ensure valid config by loading the configuration screen if there are errors or missing required fields.","title":"User configuration"},{"location":"config/user/#github-auth","text":"You'll need to create a personal access token (classic) with public_repo and read:org permissions and, if required by the organization, enable SAML single sign-on . The following APIs are used: /search/issues ( GET ) /repos/{owner}/{repo}/pulls/{pull_number}/reviews ( GET ) /orgs/{org}/teams/{team_slug}/members ( GET ) Note This endpoint is not yet supported when using fine-grained personal access tokens.","title":"GitHub auth"},{"location":"config/user/#jira-auth","text":"You'll need to create an API token with the appropriate scopes. The following APIs are used: /rest/api/2/issue ( POST ) /rest/api/2/myself ( GET ) /rest/api/2/search ( POST ) /rest/api/2/issue/{issueIdOrKey}/transitions ( GET , POST )","title":"Jira auth"}]}